apiVersion: v1
kind: ConfigMap
metadata:
  name: api-key-sync-script
  namespace: media-v2
data:
  sync-api-keys.sh: |
    #!/bin/sh
    set -e
    
    echo "Starting API key sync watcher..."
    
    # Install inotify-tools if not present
    apk add --no-cache inotify-tools kubectl 2>/dev/null || true
    
    # Function to extract API key from config file
    extract_api_key() {
      local config_file="$1"
      if [ -f "$config_file" ]; then
        grep -oP '(?<=<ApiKey>)[^<]+' "$config_file" 2>/dev/null || true
      fi
    }
    
    # Function to update or create secret
    update_secret() {
      local key_name="$1"
      local key_value="$2"
      
      if [ -z "$key_value" ]; then
        echo "No API key value for $key_name, skipping..."
        return
      fi
      
      echo "$(date): Updating secret key: $key_name = ${key_value:0:8}..."
      
      # Check if secret exists
      if kubectl get secret media-api-keys -n media-v2 >/dev/null 2>&1; then
        # Get current secret data
        CURRENT_KEYS=$(kubectl get secret media-api-keys -n media-v2 -o json | jq -r '.data | to_entries | map("\(.key)=\(.value)") | .[]')
        
        # Create a new secret with updated key
        kubectl delete secret media-api-keys -n media-v2 --ignore-not-found=true
        
        # Recreate with all existing keys plus the new one
        ARGS=""
        for entry in $CURRENT_KEYS; do
          KEY=$(echo "$entry" | cut -d= -f1)
          VALUE=$(echo "$entry" | cut -d= -f2)
          if [ "$KEY" != "$key_name" ]; then
            DECODED=$(echo "$VALUE" | base64 -d)
            ARGS="$ARGS --from-literal=$KEY=$DECODED"
          fi
        done
        
        # Add the new/updated key
        kubectl create secret generic media-api-keys -n media-v2 \
          $ARGS --from-literal="$key_name=$key_value"
      else
        # Create new secret with this key
        kubectl create secret generic media-api-keys -n media-v2 \
          --from-literal="$key_name=$key_value"
      fi
      
      echo "$(date): Secret updated successfully"
    }
    
    # Function to sync a specific service
    sync_service() {
      local service="$1"
      local config_path="$2"
      local secret_key="$3"
      
      echo "$(date): Checking $service config at $config_path"
      API_KEY=$(extract_api_key "$config_path")
      if [ -n "$API_KEY" ]; then
        update_secret "$secret_key" "$API_KEY"
      else
        echo "$(date): No API key found in $service config yet"
      fi
    }
    
    # Initial sync on startup
    echo "$(date): Performing initial sync..."
    sync_service "Radarr" "/radarr-config/config.xml" "radarr-api-key"
    sync_service "Sonarr" "/sonarr-config/config.xml" "sonarr-api-key"
    sync_service "Prowlarr" "/prowlarr-config/config.xml" "prowlarr-api-key"
    sync_service "Bazarr" "/bazarr-config/config.xml" "bazarr-api-key"
    
    # Set up file watchers for all config files
    echo "$(date): Setting up file watchers..."
    
    # Create a monitoring function for each service
    (
      while true; do
        inotifywait -e modify,create /radarr-config/config.xml 2>/dev/null && \
          sync_service "Radarr" "/radarr-config/config.xml" "radarr-api-key"
      done
    ) &
    
    (
      while true; do
        inotifywait -e modify,create /sonarr-config/config.xml 2>/dev/null && \
          sync_service "Sonarr" "/sonarr-config/config.xml" "sonarr-api-key"
      done
    ) &
    
    (
      while true; do
        inotifywait -e modify,create /prowlarr-config/config.xml 2>/dev/null && \
          sync_service "Prowlarr" "/prowlarr-config/config.xml" "prowlarr-api-key"
      done
    ) &
    
    (
      while true; do
        inotifywait -e modify,create /bazarr-config/config.xml 2>/dev/null && \
          sync_service "Bazarr" "/bazarr-config/config.xml" "bazarr-api-key"
      done
    ) &
    
    echo "$(date): File watchers started. Monitoring for changes..."
    
    # Keep the main process running
    while true; do
      # Periodic health check every 5 minutes
      sleep 300
      echo "$(date): Health check - watchers still running"
      
      # Optional: Re-sync all keys periodically as a safety measure
      sync_service "Radarr" "/radarr-config/config.xml" "radarr-api-key"
      sync_service "Sonarr" "/sonarr-config/config.xml" "sonarr-api-key"
      sync_service "Prowlarr" "/prowlarr-config/config.xml" "prowlarr-api-key"
      sync_service "Bazarr" "/bazarr-config/config.xml" "bazarr-api-key"
    done