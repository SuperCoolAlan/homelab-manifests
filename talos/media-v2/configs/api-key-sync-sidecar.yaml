apiVersion: v1
kind: ConfigMap
metadata:
  name: api-key-sync-sidecar
  namespace: media-v2
data:
  sync-api-key.sh: |
    #!/bin/sh
    set -e
    
    # Get service name from environment
    SERVICE="${SERVICE_NAME:-unknown}"
    SECRET_KEY="${SECRET_KEY:-$SERVICE-api-key}"
    CONFIG_PATH="${CONFIG_PATH:-/config/config.xml}"
    
    echo "Starting API key sync for $SERVICE..."
    
    # Install required tools
    apk add --no-cache inotify-tools kubectl jq 2>/dev/null || true
    
    # Function to extract API key from config file
    extract_api_key() {
      if [ -f "$CONFIG_PATH" ]; then
        sed -n 's/.*<ApiKey>\([^<]*\)<\/ApiKey>.*/\1/p' "$CONFIG_PATH" 2>/dev/null || true
      fi
    }
    
    # Function to update or create secret
    update_secret() {
      local key_value="$1"
      
      if [ -z "$key_value" ]; then
        echo "No API key value found, skipping..."
        return
      fi
      
      echo "$(date): Updating secret key: $SECRET_KEY = ${key_value:0:8}..."
      
      # Check if secret exists
      if kubectl get secret media-api-keys -n media-v2 >/dev/null 2>&1; then
        # Get current secret data as JSON
        CURRENT_DATA=$(kubectl get secret media-api-keys -n media-v2 -o json | jq -r '.data // {}')
        
        # Add or update our key
        UPDATED_DATA=$(echo "$CURRENT_DATA" | jq --arg key "$SECRET_KEY" --arg value "$(echo -n "$key_value" | base64)" '. + {($key): $value}')
        
        # Patch the secret
        kubectl patch secret media-api-keys -n media-v2 --type='merge' -p "{\"data\": $UPDATED_DATA}"
      else
        # Create new secret with this key
        kubectl create secret generic media-api-keys -n media-v2 \
          --from-literal="$SECRET_KEY=$key_value"
      fi
      
      echo "$(date): Secret updated successfully"
    }
    
    # Function to sync config
    sync_config() {
      echo "$(date): Checking $SERVICE config at $CONFIG_PATH"
      API_KEY=$(extract_api_key)
      if [ -n "$API_KEY" ]; then
        update_secret "$API_KEY"
      else
        echo "$(date): No API key found in config yet"
      fi
    }
    
    # Initial sync on startup
    echo "$(date): Performing initial sync..."
    sync_config
    
    # Set up file watcher
    echo "$(date): Setting up file watcher for $CONFIG_PATH..."
    
    while true; do
      # Wait for file changes
      inotifywait -e modify,create "$CONFIG_PATH" 2>/dev/null && sync_config || true
      
      # Also do a periodic sync every 5 minutes as backup
      sleep 300 && sync_config || true
    done